package org.example.projetjavafinal.util;

import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;
import org.hibernate.service.ServiceRegistry;

public class HibernateUtil {
    private static SessionFactory sessionFactory;
    private static ServiceRegistry serviceRegistry;

    private static void buildSessionFactory() {
        try {
            System.out.println("üîß Initialisation de Hibernate...");

            // Cr√©er la configuration
            Configuration configuration = new Configuration();
            configuration.configure("hibernate.cfg.xml");
            System.out.println("üìã Configuration Hibernate charg√©e depuis hibernate.cfg.xml");

            // Ajouter explicitement les entit√©s si elles ne sont pas dans le XML
            try {
                configuration.addAnnotatedClass(org.example.projetjavafinal.model.Utilisateur.class);
                System.out.println("‚úÖ Entit√© Utilisateur ajout√©e");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Erreur lors de l'ajout de l'entit√© Utilisateur: " + e.getMessage());
            }

            try {
                configuration.addAnnotatedClass(org.example.projetjavafinal.model.Client.class);
                System.out.println("‚úÖ Entit√© Client ajout√©e");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Erreur lors de l'ajout de l'entit√© Client: " + e.getMessage());
            }

            try {
                configuration.addAnnotatedClass(org.example.projetjavafinal.model.Vehicule.class);
                System.out.println("‚úÖ Entit√© Vehicule ajout√©e");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Erreur lors de l'ajout de l'entit√© Vehicule: " + e.getMessage());
            }

            try {
                configuration.addAnnotatedClass(org.example.projetjavafinal.model.Reservation.class);
                System.out.println("‚úÖ Entit√© Reservation ajout√©e");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Erreur lors de l'ajout de l'entit√© Reservation: " + e.getMessage());
            }

            // AJOUT : Entit√© Chauffeur si elle existe
            try {
                configuration.addAnnotatedClass(org.example.projetjavafinal.model.Chauffeur.class);
                System.out.println("‚úÖ Entit√© Chauffeur ajout√©e");
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Erreur lors de l'ajout de l'entit√© Chauffeur: " + e.getMessage());
                System.err.println("‚ÑπÔ∏è Si vous n'avez pas de classe Chauffeur, c'est normal");
            }

            // Cr√©er le service registry
            serviceRegistry = new StandardServiceRegistryBuilder()
                    .applySettings(configuration.getProperties())
                    .build();
            System.out.println("üîß ServiceRegistry cr√©√© avec succ√®s");

            // Cr√©er la SessionFactory
            sessionFactory = configuration.buildSessionFactory(serviceRegistry);
            System.out.println("‚úÖ SessionFactory cr√©√©e avec succ√®s !");

            // Tester la connexion
            testConnection();

        } catch (Exception e) {
            System.err.println("‚ùå Erreur d√©taill√©e lors de la cr√©ation de la SessionFactory :");
            System.err.println("Type d'erreur : " + e.getClass().getSimpleName());
            System.err.println("Message : " + e.getMessage());

            // Afficher la cause racine si elle existe
            Throwable cause = e.getCause();
            if (cause != null) {
                System.err.println("Cause : " + cause.getMessage());

                // Afficher plus de d√©tails sur la cause
                if (cause.getCause() != null) {
                    System.err.println("Cause racine : " + cause.getCause().getMessage());
                }
            }

            e.printStackTrace();

            // Nettoyer les ressources en cas d'erreur
            cleanup();

            // Lancer une exception avec un message plus clair
            throw new RuntimeException("Impossible d'initialiser Hibernate. V√©rifiez votre configuration de base de donn√©es.", e);
        }
    }

    private static void testConnection() {
        try {
            if (sessionFactory != null) {
                // Tester la connexion en ouvrant et fermant une session
                var session = sessionFactory.openSession();
                System.out.println("üîç Test de la session Hibernate...");

                // Tester une requ√™te simple plus basique
                try {
                    var query = session.createQuery("SELECT COUNT(*) FROM Utilisateur", Long.class);
                    Long count = query.uniqueResult();
                    System.out.println("üìä Nombre d'utilisateurs dans la base: " + count);
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è Impossible de compter les utilisateurs, mais la connexion fonctionne");
                    System.err.println("D√©tail : " + e.getMessage());
                }

                session.close();
                System.out.println("‚úÖ Test de connexion √† la base de donn√©es r√©ussi");
            }
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Erreur lors du test de connexion: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static SessionFactory getSessionFactory() {
        if (sessionFactory == null) {
            synchronized (HibernateUtil.class) {
                if (sessionFactory == null) {
                    System.out.println("‚ö†Ô∏è SessionFactory est null, tentative de cr√©ation...");
                    buildSessionFactory();
                }
            }
        }

        if (sessionFactory == null) {
            throw new RuntimeException("‚ùå Impossible de cr√©er la SessionFactory. V√©rifiez la configuration de la base de donn√©es.");
        }

        return sessionFactory;
    }

    public static void shutdown() {
        try {
            if (sessionFactory != null && !sessionFactory.isClosed()) {
                sessionFactory.close();
                System.out.println("üîí SessionFactory ferm√©e avec succ√®s");
            }

            if (serviceRegistry != null) {
                StandardServiceRegistryBuilder.destroy(serviceRegistry);
                System.out.println("üîí ServiceRegistry d√©truit avec succ√®s");
            }
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de la fermeture de Hibernate: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void cleanup() {
        try {
            if (sessionFactory != null) {
                sessionFactory.close();
                sessionFactory = null;
            }

            if (serviceRegistry != null) {
                StandardServiceRegistryBuilder.destroy(serviceRegistry);
                serviceRegistry = null;
            }
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du nettoyage des ressources: " + e.getMessage());
        }
    }

    // M√©thode utilitaire pour v√©rifier si Hibernate est initialis√©
    public static boolean isInitialized() {
        return sessionFactory != null && !sessionFactory.isClosed();
    }
}